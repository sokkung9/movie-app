{"version":3,"sources":["Movie.js","App.js","reportWebVitals.js","index.js"],"names":["MovieGenre","genre","className","MoviePoster","poster","alt","src","title","Movie","genres","synopsis","map","index","text","maxLine","ellipsis","trimRight","basedOn","App","state","_renderMovies","console","log","movies","movie","title_english","medium_cover_image","id","_getMovies","a","_callApi","setState","fetch","then","response","json","data","catch","err","this","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gTAiCA,SAASA,EAAT,GAA8B,IAATC,EAAQ,EAARA,MACjB,OACI,uBAAMC,UAAU,cAAhB,UAA+BD,EAA/B,OAIR,SAASE,EAAT,GAAsC,IAAfC,EAAc,EAAdA,OAAQC,EAAM,EAANA,IAC3B,OACI,qBAAKC,IAAKF,EAAQC,IAAKA,EAAKE,MAAOF,EAAKH,UAAU,iBAqB3CM,MAxDf,YAAmD,IAAnCD,EAAkC,EAAlCA,MAAOH,EAA2B,EAA3BA,OAAQK,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,SACnC,OACI,sBAAKR,UAAU,QAAf,UACI,qBAAKA,UAAU,eAAf,SACI,cAACC,EAAD,CAAaC,OAAQA,EAAQC,IAAKE,MAEtC,sBAAKL,UAAU,eAAf,UACI,6BAAKK,IACL,qBAAKL,UAAU,eAAf,SACKO,EAAOE,KAAI,SAACV,EAAOW,GAChB,OAAO,cAACZ,EAAD,CAAYC,MAAOA,GAAYW,QAG9C,mBAAGV,UAAU,kBAAb,SACI,cAAC,IAAD,CACIW,KAAMH,EACNI,QAAQ,IACRC,SAAS,OACTC,WAAS,EACTC,QAAQ,qBC8CjBC,E,4MA1DbC,MAAQ,G,EAORC,cAAgB,WAYd,OAXAC,QAAQC,IAAI,iBACG,EAAKH,MAAMI,OAAOZ,KAAI,SAACa,GAEpC,OADAH,QAAQC,IAAI,WAAYE,GACjB,cAAC,EAAD,CACCjB,MAAOiB,EAAMC,cACbrB,OAAQoB,EAAME,mBAEdjB,OAAQe,EAAMf,OACdC,SAAUc,EAAMd,UAFXc,EAAMG,Q,EAQvBC,W,sBAAa,4BAAAC,EAAA,6DACXR,QAAQC,IAAI,cADD,SAEU,EAAKQ,WAFf,OAELP,EAFK,OAGX,EAAKQ,SAAS,CACZR,WAJS,2C,EAQbO,SAAW,WAET,OADAT,QAAQC,IAAI,YACLU,MAAM,6DACZC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKb,UACvBc,OAAM,SAAAC,GAAG,OAAIjB,QAAQC,IAAIgB,O,uDAjC5B,WACEjB,QAAQC,IAAI,aACZiB,KAAKX,e,oBAkCP,WAAU,IACAL,EAAWgB,KAAKpB,MAAhBI,OACR,OACE,qBAAKrB,UAAWqB,EAAS,MAAQ,cAAjC,SACGgB,KAAKpB,MAAMI,OAASgB,KAAKnB,gBAAkB,gB,GA3ClCoB,IAAMC,WCATC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,YCCdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.0bb605e9.chunk.js","sourcesContent":["import React from 'react';\r\n// import { Link } from 'react-router-dom';\r\nimport './Movie.css';\r\nimport PropTypes from 'prop-types';\r\nimport LinesEllipsis from 'react-lines-ellipsis';\r\n\r\nfunction Movie({title, poster, genres, synopsis}) {\r\n    return (\r\n        <div className=\"Movie\">\r\n            <div className=\"Movie_Columm\">\r\n                <MoviePoster poster={poster} alt={title} />\r\n            </div>\r\n            <div className=\"Movie_Columm\">\r\n                <h1>{title}</h1>\r\n                <div className=\"Movie_Genres\">\r\n                    {genres.map((genre, index) => {\r\n                        return <MovieGenre genre={genre} key={index} />\r\n                    })}\r\n                </div>\r\n                <p className=\"Movie_Sysnopsis\">\r\n                    <LinesEllipsis\r\n                        text={synopsis}\r\n                        maxLine='3'\r\n                        ellipsis=' ...'\r\n                        trimRight\r\n                        basedOn='letters'\r\n                    />\r\n                </p>\r\n            </div>\r\n        </div> \r\n    )\r\n}\r\n\r\nfunction MovieGenre({genre}) {\r\n    return (\r\n        <span className=\"Movie_Genre\">{genre} </span>\r\n    )\r\n}\r\n\r\nfunction MoviePoster ({poster, alt}) { // props poster\r\n    return (\r\n        <img src={poster} alt={alt} title={alt} className=\"Movie_Poster\"/>\r\n    )   \r\n}\r\n\r\n\r\nMovie.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.string.isRequired,\r\n    synopsis: PropTypes.string.isRequired,\r\n}\r\n\r\nMoviePoster.propTypes = {\r\n    poster: PropTypes.string.isRequired,\r\n    alt: PropTypes.string.isRequired,\r\n}\r\n\r\nMovieGenre.propTypes = {\r\n    genre: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Movie;","// import logo from './logo.svg';\nimport React from 'react';\n// import { BrowserRouter, Link, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport Movie from './Movie';\n// import Music from './Music';\n\n\n// Render: componentWillMount() -> render() -> componentDidMount()\n\n// Update: ComponentWillRecieveProps() -> shouldComponentUpdate() == true -> componentWillUpdate()\n// -> render() -> componentDidUpdate()\nclass App extends React.Component {\n  state = {}\n\n  componentDidMount() {\n    console.log('did mount');\n    this._getMovies();\n  }\n\n  _renderMovies = () => {\n    console.log('_renderMovies');\n    const movies = this.state.movies.map((movie) => {\n      console.log(\"movie===\", movie)\n      return <Movie\n              title={movie.title_english}\n              poster={movie.medium_cover_image}\n              key={movie.id}\n              genres={movie.genres}\n              synopsis={movie.synopsis}\n            />\n    })\n    return movies\n  }\n\n  _getMovies = async () => {\n    console.log('_getMovies');\n    const movies = await this._callApi()\n    this.setState({\n      movies\n    })\n  }\n\n  _callApi = () => {\n    console.log('_callApi');\n    return fetch('https://yts.mx/api/v2/list_movies.json?sort_by=like_count')\n    .then(response => response.json())\n    .then(json => json.data.movies)\n    .catch(err => console.log(err));\n  }\n\n  render() {\n    const { movies } = this.state;\n    return (\n      <div className={movies ? 'App' : 'App-loading'}>\n        {this.state.movies ? this._renderMovies() : 'Loading'}\n\n        {/* <BrowserRouter>\n          <Link to=\"/movie\">To movie</Link>\n          <br/>\n          <Link to=\"/music\">To music</Link>\n          <Switch>\n            <Route path=\"/movie\" render={props => <Movie {...props} />}/>\n            <Route path=\"/music\" render={props => <Music {...props} />}/>\n          </Switch>\n        </BrowserRouter> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport '@popperjs/core';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}